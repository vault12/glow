{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/events/events.js",
    "src/config.coffee",
    "src/crypto_storage.coffee",
    "src/js_nacl_driver.coffee",
    "src/js_nacl_worker_driver.coffee",
    "src/keyratchet.coffee",
    "src/keyring.coffee",
    "src/keys.coffee",
    "src/mailbox.coffee",
    "src/main.coffee",
    "src/mixins.coffee",
    "src/nacl.coffee",
    "src/rachetbox.coffee",
    "src/relay.coffee",
    "src/test_driver.coffee",
    "src/utils.coffee"
  ],
  "names": [],
  "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",
  "file": "generated.js",
  "sourceRoot": "../",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Constants that define behavior for the glow library\nclass Config\n  @_NONCE_TAG:  '__nc'\n  @_SKEY_TAG:   'storage_key'\n  @_DEF_ROOT:   '.v1.stor.vlt12'\n\n  @RELAY_TOKEN_LEN: 32 # Relay tokens, keys and hashes are 32 bytes\n  @RELAY_TOKEN_B64: 44\n\n  # 5 min - Matched with config.x.relay.token_timeout\n  @RELAY_TOKEN_TIMEOUT: 5 * 60 * 1000\n\n  # 15 min - Matched with config.x.relay.session_timeout\n  @RELAY_SESSION_TIMEOUT: 15 * 60 * 1000\n\n  # 5 sec - Ajax request timeout\n  @RELAY_AJAX_TIMEOUT: 5 * 1000\n\n  # Restart session and retry relay requests several times\n  @RELAY_RETRY_REQUEST_ATTEMPTS: 15\n\n  # 60 min - Block relay for this interval when several requests fail in a row\n  @RELAY_BLOCKING_TIME: 60 * 60 * 1000\n\nmodule.exports = Config\n\n# Put all libs into global namespace for console access\n# window.__CRYPTO_DEBUG = true\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig = require 'config'\nKeys = require 'keys'\nNacl = require 'nacl'\nUtils = require 'utils'\n\n# Secure local storage\nclass CryptoStorage\n\n  # Construction:\n  # CryptoStorage.new(..params..).then (storage)=>\n  #   storage is ready to be used here\n\n  _storageDriver: null\n\n  # Keys are tagged in local storage with a versioned prefix\n  # Synchronous\n  tag: (strKey)->\n    strKey and strKey + @root\n\n  # Changing roots allows different versions to keep separate storage areas\n  # Returns a Promise\n  @new: (storageKey = null, r = null)->\n    cs = new CryptoStorage\n    cs.storageKey = storageKey\n    cs.root = if r then \".#{r}#{Config._DEF_ROOT}\" else Config._DEF_ROOT\n    # TODO: move storage key to hw and provide it in ctor call\n    unless cs.storageKey\n      cs._loadKey().then ->\n        unless cs.storageKey\n          # If we don't have a loaded storageKey, make a new one\n          cs.newKey().then ->\n            cs\n        else\n          cs\n    else\n      Utils.resolve(cs)\n\n  # Returns a Promise\n  _saveKey: ->\n    @_set(Config._SKEY_TAG, @storageKey.toString())\n\n  # Returns a Promise\n  _loadKey: ->\n    @_get(Config._SKEY_TAG).then (keyStr)=>\n      @setKey(Keys.fromString(keyStr)) if keyStr\n\n  # have to call with overseerAuthorized as true for extra safety\n  # Returns a Promise\n  selfDestruct: (overseerAuthorized)->\n    Utils.ensure(overseerAuthorized)\n    @_localRemove(@tag(Config._SKEY_TAG))\n\n  # Returns a Promise\n  setKey: (objStorageKey)->\n    @storageKey = objStorageKey\n    @_saveKey()\n\n  # Returns a Promise\n  newKey: ->\n    Nacl.makeSecretKey().then (key)=>\n      @setKey(key)\n\n  # main storage functions\n\n  # Returns a Promise\n  save: (strTag, data)->\n    Utils.ensure(strTag)\n    # let's convert the data to JSON, then make that string a byte array\n    data = JSON.stringify(data)\n    Nacl.use().encode_utf8(data).then (data)=>\n    # each data field saved generates its own nonce\n      Nacl.use().crypto_secretbox_random_nonce().then (nonce)=>\n        Nacl.use().crypto_secretbox(data, nonce, @storageKey.key).then (aCText)=>\n          # save the chipher text and nonce for this save op\n          # @_set(strTag, aCText.toBase64()).then =>\n          #   @_set(\"#{Config._NONCE_TAG}.#{strTag}\", nonce.toBase64()).then =>\n          #     true # signal success\n          @_multiSet(strTag, aCText.toBase64(),\n            \"#{Config._NONCE_TAG}.#{strTag}\", nonce.toBase64()).then =>\n            true # signal success\n\n  # Returns a Promise\n  get: (strTag)->\n    @_get(strTag).then (ct)=> # get cipher text by storage tag\n      return null unless ct # nothing to do without cipher text\n      @_get(\"#{Config._NONCE_TAG}.#{strTag}\").then (nonce)=>\n        return null unless nonce # nothing to do without nonce\n        # covert cipher text to arrays from base64 in local storage\n        Nacl.use().crypto_secretbox_open(ct.fromBase64(), nonce.fromBase64(),\n          @storageKey.key).then (aPText)=>\n          # restore JSON string from plain text array and parse it\n          Nacl.use().decode_utf8(aPText).then (data)=>\n            JSON.parse(data)\n\n  # Returns a Promise\n  remove: (strTag)->\n    @_localRemove(@tag(strTag)).then =>\n      @_localRemove(@tag(\"#{Config._NONCE_TAG}.#{strTag}\")).then =>\n        true\n\n  # Private access functions for tagged read/write\n  # Returns a Promise\n  _get: (strTag)->\n    @_localGet(@tag(strTag))\n\n  # Returns a Promise\n  _set: (strTag, strData)->\n    Utils.ensure(strTag)\n    @_localSet(@tag(strTag), strData).then ->\n      strData\n\n  # Returns a Promise\n  _multiSet: (strTag1, strData1, strTag2, strData2)->\n    Utils.ensure(strTag1, strTag2)\n    if @_storage().multiSet\n      @_localMultiSet([ @tag(strTag1), strData1, @tag(strTag2), strData2 ])\n    else\n      @_set(strTag1, strData1).then =>\n        @_set(strTag2, strData2)\n\n  # Returns a Promise\n  _localGet: (str)->\n    @_storage().get(str)\n\n  # Returns a Promise\n  _localSet: (str, data)->\n    @_storage().set(str, data)\n\n  # Returns a Promise\n  _localMultiSet: (pairs)->\n    @_storage().multiSet(pairs)\n\n  # Returns a Promise\n  _localRemove: (str)->\n    @_storage().remove(str)\n\n  # Synchronous\n  _storage: ()->\n    CryptoStorage._storageDriver\n\n  # Synchronous\n  @startStorageSystem = (driver)->\n    Utils.ensure(driver)\n    @_storageDriver = driver\n\nmodule.exports = CryptoStorage\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nUtils = require 'utils'\n\n# Nacl driver for the js-nacl emscripten implementation\nclass JsNaclDriver\n\n  _instance: null\n  _unloadTimer:  null\n\n  # HEAP_SIZE: heap size for js-nacl emscripten implementation; default 2 ** 26 = 67,108,864\n  constructor: (js_nacl = null, @HEAP_SIZE = 2 ** 26)->\n    # If we are running in the browser, then nacl_factory will be defined by\n    # including the nacl_factory.js lib before including glow. If we are on node,\n    # then require 'js-nacl' will include nacl_factory appropriately\n    # https://github.com/tonyg/js-nacl\n    @js_nacl = js_nacl or (if nacl_factory? then nacl_factory) or require('js-nacl')\n    @load()\n\n  # whenever we call use, we're accessing the js-nacl lib for a function call\n  use: ->\n    # Global instance to avoid duplicating heap\n    throw new Error('js-nacl is not loaded') unless @_instance\n    @_instance\n\n  load: ->\n    nacl_factory.instantiate( (new_nacl) =>\n      @_instance = new_nacl\n      @.crypto_secretbox_KEYBYTES = @use().crypto_secretbox_KEYBYTES\n      require('nacl').API.forEach (f)=>\n        @[f] = =>\n          inst = @use()\n          try\n            Utils.resolve(inst[f].apply(inst, arguments))\n          catch e\n            Utils.reject(e)\n    ,\n      requested_total_memory: @HEAP_SIZE\n    )\n\n  unload: ->\n    @_instance = null\n    delete @_instance\n\nmodule.exports = JsNaclDriver\nwindow.JsNaclDriver = JsNaclDriver if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nUtils = require 'utils'\n\n# Nacl driver for the js-nacl emscripten implementation run in a Web Worker\nclass JsNaclWebWorkerDriver\n\n  constructor: (\n    worker_path = './build/js_nacl_worker.js',\n    js_nacl_path = '../node_modules/js-nacl/lib/nacl_factory.js',\n    heap_size = 2 ** 26 )->\n\n    random_reqs =\n      random_bytes: 32\n      crypto_box_keypair: 32\n      crypto_box_random_nonce: 24\n      crypto_secretbox_random_nonce: 24\n\n    hasCrypto = false\n    api = []\n    queues = {}\n    worker = new Worker(worker_path)\n\n    @.crypto_secretbox_KEYBYTES = 32 # TODO: get from js_nacl\n\n    require('nacl').API.forEach (f)=>\n      queue = []\n      queues[f] = queue\n      api.push(f)\n\n      @[f] = ->\n        p = Utils.promise (res, rej)->\n          queue.push\n            resolve: res\n            reject: rej\n\n        args = Array.prototype.slice.call(arguments)\n        refs = []\n        # args.forEach (arg)->\n        #   refs.push(arg.buffer) if arg instanceof Uint8Array\n\n        rnd = null\n        if !hasCrypto\n          n = random_reqs[f]\n          if n\n            rnd = new Uint8Array(32) # always use 32 otherwise stress tests fail\n            crypto.getRandomValues(rnd)\n\n        worker.postMessage({ cmd: f, args: args, rnd: rnd }, refs)\n        p\n\n    onmessage2 = (e)->\n      queue = queues[e.data.cmd]\n      if e.data.error\n        queue.shift().reject(new Error(e.data.message))\n      else\n        queue.shift().resolve(e.data.res)\n\n    worker.onmessage = (e)->\n      throw new Error() unless e.data.cmd == 'init'\n      hasCrypto = e.data.hasCrypto\n      console.log('js nacl web worker initialized; hasCrypto: ' + hasCrypto)\n      worker.onmessage = onmessage2\n\n    worker.postMessage\n      cmd: 'init'\n      naclPath: js_nacl_path\n      heapSize: heap_size\n      api: api\n\nmodule.exports = JsNaclWebWorkerDriver\nwindow.JsNaclDriver = JsNaclWebWorkerDriver if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nNacl = require 'nacl'\n\nclass KeyRatchet\n\n  # Construction:\n  # KeyRatchet.new(..params..).then (kr)=>\n  #   kr is ready to be used here\n\n  # Last used key, we know other party has it\n  lastKey: null\n\n  # Confirmed key, we know other party just got it\n  confirmedKey: null\n\n  # Next key, we sending it to the other party. We\n  # do not know when/if it will confirm it\n  nextKey: null\n\n  _roles: ['lastKey', 'confirmedKey', 'nextKey']\n\n  # Returns a Promise\n  @new: (@id, @keyRing, firstKey = null)->\n    Utils.ensure(@id, @keyRing)\n    kr = new KeyRatchet\n    keys = @_roles.map (s)=>\n      kr.keyRing.getKey(kr.keyTag(s)).then (key)=>\n        kr[s] = key\n    Utils.all(keys).then =>\n      if firstKey\n        kr.startRatchet(firstKey).then =>\n          kr\n      else\n        kr\n\n  # Synchronous\n  keyTag: (role)->\n    \"#{role}_#{@id}\"\n\n  # Returns a Promise\n  storeKey: (role)->\n    @keyRing.saveKey(@keyTag(role), @[role])\n\n  # Returns a Promise\n  startRatchet: (firstKey)->\n    # If we dont have confirmed key to work with\n    # we have to start ratchet with a default key\n    keys = ['confirmedKey', 'lastKey'].map (k)=>\n      unless @[k]\n        @[k] = firstKey\n        @storeKey k\n    Utils.all(keys).then =>\n      unless @nextKey\n        Nacl.makeKeyPair().then (nextKey)=>\n          @nextKey = nextKey\n          @storeKey('nextKey')\n\n  # Returns a Promise\n  pushKey: (newKey)->\n    @lastKey = @confirmedKey\n    @confirmedKey = @nextKey\n    @nextKey = newKey\n    Utils.all(@_roles.map (s)=> @storeKey(s))\n\n  # Returns a Promise\n  confKey: (newConfirmedKey)->\n    return Utils.resolve(false) if @confirmedKey and @confirmedKey.equal(newConfirmedKey)\n    # console.log \"Key confirmed: replacing in #{@id} | #{@confirmedKey.boxPk.toBase64()} with #{newConfirmedKey.boxPk.toBase64()}\"\n    @lastKey = @confirmedKey\n    @confirmedKey = newConfirmedKey\n    Utils.all(['lastKey', 'confirmedKey'].map((s)=> @storeKey(s))).then ->\n      true\n\n  # Synchronous\n  curKey: ->\n    return @confirmedKey if @confirmedKey\n    @lastKey\n\n  # Returns a Promise\n  h2LastKey: ->\n    Nacl.h2(@lastKey.boxPk)\n\n  # Returns a Promise\n  h2ConfirmedKey: ->\n    Nacl.h2(@confirmedKey.boxPk)\n\n  # Returns a Promise\n  h2NextKey: ->\n    Nacl.h2(@nextKey.boxPk)\n\n  # Returns a Promise\n  keyByHash: (hash)->\n    Utils.serial @_roles, (role)=>\n      Nacl.h2(@[s].boxPk).then (h2)=>\n        @[s] if h2 == hash\n\n  # Returns a Promise\n  isNextKeyHash: (hash)->\n    @h2NextKey().then (h2)->\n      h2.equal(hash)\n\n  # Synchronous\n  toStr: ->\n    JSON.stringify(@).toBase64()\n\n  # Synchronous\n  fromStr: (str)->\n    Utils.extend @, JSON.parse(str.fromBase64())\n\n  # Returns a Promise\n  selfDestruct: (overseerAuthorized)->\n    Utils.ensure(overseerAuthorized)\n    Utils.all @_roles.map (s)=>\n      @keyRing.deleteKey(@keyTag(s))\n\nmodule.exports = KeyRatchet\nwindow.KeyRatchet = KeyRatchet if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig        = require 'config'\nCryptoStorage = require 'crypto_storage'\nKeys          = require 'keys'\nNacl          = require 'nacl'\nUtils         = require 'utils'\nEventEmitter  = require('events').EventEmitter\n\nensure = Utils.ensure\n\n# Manages the public keys of correspondents\nclass KeyRing extends EventEmitter\n\n  # Construction:\n  # KeyRing.new(..params..).then (kr)=>\n  #   kr is ready to be used here\n\n  # storage master key arrives from HW storage\n  # Returns a Promise\n  @new: (id, strMasterKey = null)->\n    kr = new KeyRing\n    if strMasterKey\n      key = Keys.fromString(strMasterKey)\n      next = CryptoStorage.new(key, id).then (storage)=>\n        kr.storage = storage\n    else\n      next = CryptoStorage.new(null, id).then (storage)=>\n        kr.storage = storage\n    next.then =>\n      kr._ensureKeys().then =>\n        kr\n\n  # Restore keyRing from backup string\n  # Returns a Promise\n  @UNIQ_TAG = \"__::commKey::__\"\n  @fromBackup: (id, strBackup) ->\n    ensure strBackup\n    data = JSON.parse strBackup\n    strCommKey = data[@UNIQ_TAG]\n    ensure strCommKey\n    delete data[@UNIQ_TAG]\n\n    fillGuests = (p, kr) ->\n      p.then ->\n        pa = (kr.addGuest(name,data[name]) for name,key of data)\n        Utils.all(pa)\n\n    KeyRing.new(id).then (kr) ->\n      p = kr.commFromSecKey strCommKey.fromBase64()\n      [p, kr]\n    .then (args) ->\n      [p, kr] = args\n      fillGuests(p,kr).then ->\n        kr\n\n  # make sure we have all basic keys created\n  # Returns a Promise\n  _ensureKeys: ->\n    @_loadCommKey().then =>\n      @_loadGuestKeys()\n\n  # Returns a Promise\n  _loadCommKey: ->\n    @getKey('comm_key').then (commKey) =>\n      @commKey = commKey\n      return if @commKey\n        Nacl.h2(@commKey.boxPk).then (hpk) =>\n          @hpk = hpk\n          @commKey\n      else\n        Nacl.makeKeyPair().then (commKey) =>\n          @commKey = commKey\n          Nacl.h2(@commKey.boxPk).then (hpk) =>\n            @hpk = hpk\n          .then =>\n            @saveKey('comm_key', @commKey)\n            @commKey\n\n  getNumberOfGuests: ->\n    Object.keys(@guestKeys or {}).length\n\n  # Returns a Promise\n  _loadGuestKeys: ->\n    @storage.get('guest_registry').then (guestKeys)=>\n      @guestKeys = guestKeys or {} # tag -> { pk, hpk }\n      @guestKeyTimeouts = {}\n\n  # Returns a Promise\n  commFromSeed: (seed)->\n    Nacl.encode_utf8(seed).then (encoded) =>\n      Nacl.fromSeed(encoded).then (commKey) =>\n        @commKey = commKey\n        Nacl.h2(@commKey.boxPk).then (hpk) =>\n          @hpk = hpk\n        .then =>\n          @storage.save('comm_key', @commKey.toString())\n          @commKey\n\n  # Returns a Promise\n  commFromSecKey: (rawSecKey)->\n    Nacl.fromSecretKey(rawSecKey).then (commKey) =>\n      @commKey = commKey\n      Nacl.h2(@commKey.boxPk).then (hpk) =>\n        @hpk = hpk\n      .then =>\n        @storage.save('comm_key', @commKey.toString())\n        @commKey\n\n  # Synchronous\n  tagByHpk: (hpk)->\n    for own k, v of @guestKeys\n      return k if hpk is v.hpk\n    null\n\n  # Synchronous\n  getMasterKey: ->\n    @storage.storageKey.key2str('key') # to b64 string\n\n  # Synchronous\n  getPubCommKey: ->\n    @commKey.strPubKey()\n\n  # Returns a Promise\n  saveKey: (tag, key)->\n    @storage.save(tag, key.toString()).then ->\n      key\n\n  # Returns a Promise\n  getKey: (tag)->\n    @storage.get(tag).then (k)->\n      if k then Keys.fromString(k) else null\n\n  # Returns a Promise\n  deleteKey: (tag)->\n    @storage.remove(tag)\n\n  # Returns a Promise\n  addGuest: (strGuestTag, b64_pk)->\n    ensure(strGuestTag,b64_pk)\n    b64_pk = b64_pk.trimLines()\n    # @_addRegistry strGuestTag\n    @_addGuestRecord(strGuestTag, b64_pk).then (guest)=>\n      @_saveNewGuest(strGuestTag, guest).then =>\n        guest.hpk\n\n  # Returns a Promise\n  _addGuestRecord: (strGuestTag, b64_pk)->\n    ensure(strGuestTag, b64_pk)\n    Nacl.h2(b64_pk.fromBase64()).then (h2)=>\n      @guestKeys[strGuestTag] =\n        pk: b64_pk\n        hpk: h2.toBase64()\n        temp: false\n\n  # Returns a Promise\n  _saveNewGuest: (tag, pk)->\n    ensure(tag, pk)\n    @storage.save('guest_registry', @guestKeys)\n\n  timeToGuestExpiration: (strGuestTag)->\n    ensure strGuestTag\n    entry = @guestKeyTimeouts[strGuestTag]\n    return 0 if not entry\n    Math.max(Config.RELAY_SESSION_TIMEOUT - (Date.now() - entry.startTime), 0)\n\n  # Synchronous\n  addTempGuest: (strGuestTag, strPubKey)->\n    ensure(strGuestTag, strPubKey)\n    strPubKey = strPubKey.trimLines()\n    Nacl.h2(strPubKey.fromBase64()).then (h2)=>\n      @guestKeys[strGuestTag] =\n        pk: strPubKey\n        hpk: h2.toBase64()\n        temp: true\n      if @guestKeyTimeouts[strGuestTag]\n        clearTimeout @guestKeyTimeouts[strGuestTag].timeoutId\n      @guestKeyTimeouts[strGuestTag] =\n        timeoutId: Utils.delay Config.RELAY_SESSION_TIMEOUT, =>\n          delete @guestKeys[strGuestTag]\n          delete @guestKeyTimeouts[strGuestTag]\n          @emit 'tmpguesttimeout', strGuestTag\n        startTime: Date.now()\n\n  # Returns a Promise\n  removeGuest: (strGuestTag)->\n    ensure(strGuestTag)\n    return Utils.resolve() unless @guestKeys[strGuestTag]\n    delete @guestKeys[strGuestTag]\n    @storage.save('guest_registry', @guestKeys)\n\n  # Synchronous\n  getGuestKey: (strGuestTag)->\n    ensure strGuestTag\n    return null unless @guestKeys[strGuestTag]\n    new Keys\n      boxPk: @getGuestRecord(strGuestTag).fromBase64()\n\n  # Synchronous\n  getGuestRecord: (strGuestTag)->\n    ensure strGuestTag\n    return null unless @guestKeys[strGuestTag]\n    @guestKeys[strGuestTag].pk\n\n  backup: ->\n    res = {}\n    if @getNumberOfGuests() > 0\n      for k,v of @guestKeys\n        unless v.temp\n          res[k]=v.pk\n    res[KeyRing.UNIQ_TAG] = @commKey.strSecKey()\n    JSON.stringify res\n\n  # have to call with overseerAuthorized as true for extra safety\n  # Returns a Promise\n  selfDestruct: (overseerAuthorized)->\n    ensure overseerAuthorized\n    @storage.remove('guest_registry').then =>\n      @storage.remove('comm_key').then =>\n        @storage.selfDestruct(overseerAuthorized)\n\nmodule.exports = KeyRing\nwindow.KeyRing = KeyRing if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Keys represents a public/secret key pair object as generated by js-nacl\nUtils = require 'utils'\n\nclass Keys\n\n  # constructs an object from the hashKeys object passed to it, or creates an\n  # empty object.\n  constructor: (hashKeys) ->\n    return unless hashKeys\n    Utils.extend @, hashKeys\n\n  toString: ->\n    JSON.stringify @constructor.keys2str @\n\n  @fromString: (strKeys) ->\n    return null unless strKeys\n    @str2keys JSON.parse strKeys.trimLines()\n\n  key2str: (strName) ->\n    return null unless strName and @[strName]?\n    @[strName].toBase64()\n\n  strPubKey: ->\n    @boxPk.toBase64()\n\n  strSecKey: ->\n    @boxSk.toBase64()\n\n  equal: (k) ->\n    return false unless @strPubKey() is k.strPubKey()\n    return false if @boxSk? isnt k.boxSk?\n    return @strSecKey() is k.strSecKey() if @boxSk?\n    return true\n\n  # Convert obj with UInt8Array to obj with strings\n  @keys2str: (objKey) ->\n    r = new Keys()\n    for own k, v of objKey\n      r[k] = v.toBase64()\n    r\n\n  # Convert obj with strings to obj with UInt8Array\n  @str2keys: (strObj) ->\n    r = new Keys()\n    for own k, v of strObj\n      r[k] = v.fromBase64()\n    r\n\nmodule.exports  = Keys\nwindow.Keys = Keys if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig        = require 'config'\nKeyRing       = require 'keyring'\nNacl          = require 'nacl'\nUtils         = require 'utils'\nEventEmitter  = require('events').EventEmitter\n\n# Mailbox service to connect with the Zax relay service\nclass MailBox extends EventEmitter\n\n  # Construction:\n  # MailBox.new(..params..).then (mbx)=>\n  #   mbx is ready to be used here\n\n  # Creates a new client Mailbox that will represent an hpk mailbox on the\n  # relay. You can provide a friendly unique name to represent that Mailbox as\n  # an *identity*. That name should be unique locally, since it's used as a\n  # storage tag.\n\n  # If your client supports dedicated cryptographic storage, you can keep the\n  # master encryption key in that storage and provide it as strMasterKey.\n\n  # All Mailbox storage calls will be symmetrically encrypted with that key.\n  # Otherwise we will make a key for you, and save it in the same CryptoStorage\n  # as the rest of of the data.\n  # Returns a Promise\n  @new: (identity, strMasterKey = null)->\n    mbx = new MailBox()\n    mbx.identity = identity\n    mbx.sessionKeys = {}\n    mbx.sessionTimeout = {}\n    KeyRing.new(mbx.identity, strMasterKey).then (keyRing)->\n      mbx.keyRing = keyRing\n      mbx\n\n  # You can create a Mailbox where the secret identity key is derived from a\n  # well-known seed.\n  # Returns a Promise\n  @fromSeed: (seed, id = seed, strMasterKey = null)->\n    @new(id, strMasterKey, false).then (mbx)=>\n      mbx.keyRing.commFromSeed(seed).then =>\n        mbx\n\n  # You can also create a Mailbox if you already know the secret identity key\n  # Returns a Promise\n  @fromSecKey: (secKey, id, strMasterKey = null)->\n    @new(id, strMasterKey, false).then (mbx)=>\n      mbx.keyRing.commFromSecKey(secKey).then =>\n        mbx\n\n  # You can also create a Mailbox from backup string\n  # Returns a Promise\n  @fromBackup: (strBackup, id, strMasterKey = null)->\n    @new(id, strMasterKey, false).then (mbx) ->\n      KeyRing.fromBackup(id,strBackup).then (kr)->\n        mbx.keyRing=kr\n        mbx\n\n\n  # --- Mailbox keys ---\n  # This is the HPK (hash of the public key) of your mailbox. This is what Zax\n  # Relays use as the universal address of your mailbox.\n  hpk: ->\n    @keyRing.hpk.toBase64()\n\n  # This is your public identity and default communication key. Your\n  # correspondents can know it, whereas Relays do not need it (other than\n  # temporarily for internal use during the ownership proof)\n  # Synchronous\n  getPubCommKey: ->\n    @keyRing.getPubCommKey()\n\n  # Allows for preemptive session renewal to avoid\n  # timeouts in the middle of a relay check\n  # Synchronous\n  timeToSessionExpiration: (sess_id)->\n    session = @sessionTimeout[sess_id]\n    return 0 if not session\n    sesExp = Math.max(Config.RELAY_SESSION_TIMEOUT - (Date.now() - session.startTime), 0)\n    guExp = @keyRing.timeToGuestExpiration(sess_id)\n    Math.min(sesExp, guExp)\n\n  # Each session with each Zax Relay creates its own temporary session keys\n  # Returns a Promise\n  createSessionKey: (sess_id, forceNew = false)->\n    Utils.ensure(sess_id)\n    return Utils.resolve(@sessionKeys[sess_id]) if not forceNew and @sessionKeys[sess_id]\n    # cancel the previous timer to prevent erase of a newly created session key\n    # if createSessionKey() is called repeatedly with the same sess_id\n    if @sessionTimeout[sess_id]\n      clearTimeout @sessionTimeout[sess_id].timeoutId\n    Nacl.makeKeyPair().then (key)=>\n      @sessionKeys[sess_id] = key\n      # Remove key material after it expires on the relay\n      @sessionTimeout[sess_id] =\n        timeoutId: Utils.delay Config.RELAY_SESSION_TIMEOUT, => @_clearSession(sess_id)\n        startTime: Date.now()\n      key\n\n  # Synchronous\n  _clearSession: (sess_id)->\n    @sessionKeys[sess_id] = null\n    delete @sessionKeys[sess_id]\n    @sessionTimeout[sess_id] = null\n    delete @sessionTimeout[sess_id]\n    @emit('relaysessiontimeout', sess_id)\n\n  # Locally determine whether Relay.connectMailbox() needs to be called\n  # Synchronous\n  isConnectedToRelay: (relay)->\n    Utils.ensure(relay)\n    relayId = relay.relayId()\n    Boolean(@sessionKeys[relayId]) and Boolean(@_gPk(relayId))\n\n  # --- Low level encoding/decoding ---\n\n  # Returns a Promise\n  rawEncodeMessage: (msg, pkTo, skFrom, nonceData = null)->\n    Utils.ensure(msg, pkTo, skFrom)\n    MailBox._makeNonce(nonceData).then (nonce)=>\n      @_parseData(msg).then (data)=>\n        Nacl.use().crypto_box(data, nonce, pkTo, skFrom).then (ctext)=>\n          nonce: nonce.toBase64()\n          ctext: ctext.toBase64()\n\n  # Returns a Promise\n  rawDecodeMessage: (nonce, ctext, pkFrom, skTo)->\n    Utils.ensure(nonce, ctext, pkFrom, skTo)\n    Nacl.use().crypto_box_open(ctext, nonce, pkFrom, skTo).then (data)->\n      Nacl.use().decode_utf8(data).then (utf8)->\n        JSON.parse(utf8)\n\n  # Encodes a free-form object *msg* to the guest key of a guest already\n  # added to our keyring. If the session flag is set, we will look for keys in\n  # temporary, not the persistent collection of session keys. skTag lets you\n  # specifiy the secret key in a key ring\n  # Returns a Promise\n  encodeMessage: (guest, msg, session = false, skTag = null)->\n    Utils.ensure(guest, msg)\n    throw new Error(\"encodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk(guest))\n    sk = @_getSecretKey(guest, session, skTag)\n\n    # TODO: add whatever neccesary int32 id/counter logic and provide nonceData as last param\n    # That int32 (on receive/decode) can be restored via _nonceData()\n    @rawEncodeMessage(msg, gpk, sk)\n\n  # Returns a Promise\n  encodeMessageSymmetric: (msg, sk)->\n    Utils.ensure(msg, sk)\n    MailBox._makeNonce().then (nonce)=>\n      Nacl.use().encode_latin1(msg).then (data)=>\n        Nacl.use().crypto_secretbox(data, nonce, sk).then (ctext)=>\n          nonce: nonce.toBase64()\n          ctext: ctext.toBase64()\n\n  # Decodes a ciphertext from a guest key already in our keyring with this\n  # nonce. If session flag is set, looks for keys in temporary, not the\n  # persistent collection of session keys. skTag (optional) lets you specify\n  # the secret key in a key ring\n  # Returns a Promise\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null)->\n    Utils.ensure(guest, nonce, ctext)\n    throw new Error(\"decodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk(guest))\n    sk = @_getSecretKey(guest, session, skTag)\n    @rawDecodeMessage(nonce.fromBase64(), ctext.fromBase64(), gpk, sk)\n\n  # Returns a Promise\n  decodeMessageSymmetric: (nonce, ctext, sk)->\n    Utils.ensure(nonce, ctext, sk)\n    Nacl.use().crypto_secretbox_open(ctext.fromBase64(), nonce.fromBase64(), sk.fromBase64()).then (data)=>\n      Nacl.use().decode_latin1(data)\n\n  # Establishes a session, exchanges temp keys and proves our ownership of this\n  # Mailbox to this specific relay. This is the first function to start\n  # communications with any relay.\n  # Returns a Promise\n  connectToRelay: (relay)->\n    Utils.ensure(relay)\n    relay.openConnection().then =>\n      relay.connectMailbox(@)\n\n  # --- Initial communications ---\n  # If we are not connected to a relay, we can still send a message (free form\n  # object) to a specific guest in our keyring. This call will first establish\n  # a connection to a relay and then send the first message via that relay.\n  # Returns a Promise\n  sendToVia: (guest, relay, msg)->\n    Utils.ensure(guest, relay, msg)\n    @connectToRelay(relay).then =>\n      @relaySend(guest, msg, relay)\n\n  # If we are not connected to a relay, we can still get pending messages for\n  # us from that relay. This call will first establish a connection to a relay\n  # and download messages. Result will be populated with an array of\n  # messages and download meta-data about those messages.\n  # Returns a Promise(messages)\n  getRelayMessages: (relay)->\n    Utils.ensure(relay)\n    @connectToRelay(relay).then =>\n      @relayMessages(relay)\n\n  # --- Established communication functions ---\n  # Once a connection with a relay is established there is no need to create\n  # new sessions. These 4 functions allow us to issue all 4 relay commands\n  # using previously established connections to a relay\n\n  # Gets pending messages count and returns the result\n  # Returns a Promise(count)\n  relayCount: (relay)->\n    Utils.ensure(relay)\n    relay.count(@).then (result)=>\n      parseInt(result)\n\n  # Gets the status of previous sent message as redis TTL:\n  # -2 : missing key\n  # -1 : key never expires\n  # 0+ : key time to live in seconds\n  # Returns a Promise(ttl)\n  relay_msg_status: (relay, storage_token) ->\n    Utils.ensure(relay)\n    relay.messageStatus(@, storage_token).then (ttl) =>\n      ttl\n\n  # Sends a free-form object to a guest we already have in our keyring\n  # Returns a Promise\n  relaySend: (guest, msg, relay)->\n    Utils.ensure(relay)\n    @encodeMessage(guest, msg).then (encMsg)=>\n      Nacl.h2(@_gPk(guest)).then (h2)=>\n        relay.upload(@, h2, encMsg)\n\n  # Downloads pending relay messages\n  # Returns a Promise(messages)\n  relayMessages: (relay)->\n    Utils.ensure(relay)\n    relay.download(@).then (result)=>\n      Utils.all result.map (emsg)=>\n        if (tag = @keyRing.tagByHpk(emsg.from))\n          emsg['fromTag'] = tag\n          if (emsg['kind'] == 'file')\n            emsg = JSON.parse emsg.data\n            @decodeMessage(tag, emsg.nonce, emsg.ctext).then (msg)=>\n              msg.uploadID = emsg.uploadID\n              msg\n          else\n            @decodeMessage(tag, emsg.nonce, emsg.data).then (msg)=>\n              if msg\n                emsg['msg'] = msg\n                delete emsg.data\n              emsg\n        else\n          emsg\n\n  # Maps the list of nonces of current messages on the relay. Since nonces are\n  # forced to be unique, they are used as global message ids for a given mailbox.\n  # Synchronous\n  relayNonceList: (download)->\n    Utils.ensure(download)\n    download.map (i) -> i.nonce\n\n  # Deletes messages from the relay given a list of message nonces.\n  # Returns a Promise\n  relayDelete: (list, relay)->\n    Utils.ensure(list, relay)\n    relay.delete(@, list)\n\n  # Deletes up to the first 100 messages from the relay for a given mailbox.\n  # Returns a Promise\n  clean: (relay)->\n    Utils.ensure(relay)\n    @getRelayMessages(relay).then (download)=>\n      @relayDelete(@relayNonceList(download), relay)\n\n  # Deletes a Mailbox and all its data from local CryptoStorage. This is a very\n  # destructive operation, use with caution - it will also delete the Mailbox\n  # keyring along with all stored public keys. To restore that information, you\n  # will need to do another key exchange with all the guests on your keyring.\n  # Returns a Promise\n  selfDestruct: (overseerAuthorized)->\n    Utils.ensure(overseerAuthorized)\n    @keyRing.selfDestruct(overseerAuthorized)\n\n  # --- Operations with files ---\n\n  # Returns a Promise\n  getFileMetadata: (relay, uploadID)->\n    Utils.ensure(relay, uploadID)\n    @relayMessages(relay).then (msgs)=>\n      msgs = msgs.filter (msg) => msg.uploadID == uploadID\n      msgs[0]\n\n  # Returns a Promise\n  startFileUpload: (guest, relay, fileMetadata)->\n    Utils.ensure(relay, guest, fileMetadata)\n    Nacl.h2(@_gPk(guest)).then (hpk)=>\n      Nacl.makeSecretKey().then (sk)=>\n        fileMetadata.skey = sk.key.toBase64()\n        @encodeMessage(guest, fileMetadata).then (encodedMetadata)=>\n          @connectToRelay(relay).then =>\n            fileSize = fileMetadata.orig_size\n            relay.startFileUpload(@, hpk, fileSize, encodedMetadata).then (response)=>\n              # append symmetric secret key (unique for this upload session) to the server response\n              response.skey = sk.key\n              response\n\n  # Returns a Promise\n  uploadFileChunk: (relay, uploadID, chunk, part, totalParts, skey)->\n    Utils.ensure(relay, uploadID, chunk, totalParts, skey)\n    @encodeMessageSymmetric(chunk, skey).then (encodedChunk)=>\n      @connectToRelay(relay).then =>\n        relay.uploadFileChunk(@, uploadID, part, totalParts, encodedChunk)\n\n  # Returns a Promise\n  getFileStatus: (relay, uploadID)->\n    Utils.ensure(relay, uploadID)\n    @connectToRelay(relay).then =>\n      relay.fileStatus(@, uploadID)\n\n  # Returns a Promise\n  downloadFileChunk: (relay, uploadID, part, skey)->\n    Utils.ensure(relay, uploadID, skey)\n    @connectToRelay(relay).then =>\n      relay.downloadFileChunk(@, uploadID, part).then (encodedChunk)=>\n        @decodeMessageSymmetric(encodedChunk.nonce, encodedChunk.ctext, skey)\n\n  # Returns a Promise\n  deleteFile: (relay, uploadID)->\n    Utils.ensure(relay, uploadID)\n    @connectToRelay(relay).then =>\n      relay.deleteFile(@, uploadID)\n\n  # --- Protected helpers ---\n\n  # Get a guest key pair by id\n  # Synchronous\n  _gKey: (strId)->\n    Utils.ensure(strId)\n    @keyRing.getGuestKey(strId)\n\n  # Get a guest public key by id\n  # Synchronous\n  _gPk: (strId)->\n    Utils.ensure(strId)\n    @_gKey(strId)?.boxPk\n\n  # Returns a Promise(hash)\n  _gHpk: (strId)->\n    Utils.ensure(strId)\n    Nacl.h2(@_gPk(strId))\n\n  # Synchronous\n  _getSecretKey: (guest, session, skTag)->\n    unless skTag\n      return if session then @sessionKeys[guest].boxSk else @keyRing.commKey.boxSk\n    else\n      # In this case we use the key ring to store temp secret keys\n      return @_gPk skTag\n\n  # Converts any object into Uint8Array\n  # Returns a Promise\n  _parseData: (data)->\n    return Utils.resolve(data) if Utils.type(data) is 'Uint8Array'\n    Nacl.use().encode_utf8(JSON.stringify(data))\n\n  # Makes a timestamp nonce that a relay expects for any crypto operations.\n  # timestamp is the first 8 bytes, the rest is random, unless custom 'data'\n  # is specified. 'data' will be packed as next 4 bytes after timestamp\n  # Returns a Promise\n  @_makeNonce: (data = null, time = Date.now())->\n    Nacl.use().crypto_box_random_nonce().then (nonce)->\n      throw new Error('RNG failed, try again?') unless nonce? and nonce.length is 24\n\n      # split timestamp integer as an array of bytes\n      headerLen = 8  # max timestamp size\n      aTime = Utils.itoa(parseInt(time/1000))\n\n      if data\n        aData = Utils.itoa(data)\n        headerLen += 4 # extra 4 bytes for custom data\n\n      # zero out nonce header area\n      nonce[i] = 0 for i in [0...headerLen]\n\n      # copy the timestamp into the first 8 bytes of nonce\n      nonce[8 - aTime.length + i] = aTime[i] for i in [0..(aTime.length - 1)]\n      # copy data if present\n      nonce[12 - aData.length + i] = aData[i] for i in [0..(aData.length - 1)] if data\n      nonce\n\n  # Retrieve nonce user-defined data from a message nonce.\n  # Synchronous\n  @_nonceData: (nonce)->\n    Utils.atoi nonce.subarray(8, 12)\n\n\nmodule.exports = MailBox\nwindow.MailBox = MailBox if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nmodule.exports =\n  Utils:                  require 'utils'\n  Mixins:                 require 'mixins'\n  Nacl:                   require 'nacl'\n  Keys:                   require 'keys'\n  SimpleStorageDriver:    require 'test_driver'\n  CryptoStorage:          require 'crypto_storage'\n  KeyRing:                require 'keyring'\n  MailBox:                require 'mailbox'\n  Relay:                  require 'relay'\n  RachetBox:              require 'rachetbox'\n  Config:                 require 'config'\n  JsNaclDriver:           require 'js_nacl_driver'\n  JsNaclWebWorkerDriver:  require 'js_nacl_worker_driver'\n\n  # naclImpl required API:\n  # - crypto_secretbox_KEYBYTES (constant)\n  # - crypto_secretbox_random_nonce(): Promise(nonce)\n  # - crypto_secretbox(data, nonce, key): Promise(data)\n  # - crypto_secretbox_open(ct, nonce, key): Promise(data)\n  # - crypto_box(data, nonce, pkTo, skFrom): Promise(data)\n  # - crypto_box_open(ctext, nonce, pkFrom, skTo): Promise(data)\n  # - crypto_box_random_nonce(): Promise(nonce)\n  # - crypto_box_keypair(): Promise(kp)\n  # - crypto_box_keypair_from_raw_sk(raw_sk): Promise(kp)\n  # - crypto_box_seed_keypair(seed): Promise(kp)\n  # - crypto_box_keypair_from_seed(seed): Promise(kp)\n  # - crypto_hash_sha256(data): Promise(hash)\n  # - random_bytes(size): Promise(bytes)\n  # - encode_latin1(string): Promise(Uint8Array)\n  # - decode_latin1(Uint8Array): Promise(string)\n  # - encode_utf8(utf8): Promise(data)\n  # - decode_utf8(data): Promise(utf8)\n  # - to_hex(data): Promise(hex)\n  # - from_hex(hex): Promise(data)\n  #\n  setNaclImpl: (naclImpl)->\n    @Nacl.setNaclImpl(naclImpl)\n\n  # js-nacl note: crypto_box_keypair_from_seed(seed)\n  # This call will be deprecated,\n  # keeping for compatibility with native driver.\n\n  # promiseImpl requried API:\n  # - promise(func(resolve, reject)): Promise - a deferrable Promise\n  # - all([promises]): Promise - resolve all elements\n  # The Promise object is expected to implement:\n  # - then(func(result)): Promise\n  # - catch(func(Error)): Promise\n  # - finally(func()): Promise\n  setPromiseImpl: (promiseImpl)->\n    @Utils.setPromiseImpl(promiseImpl)\n\n  # storeImpl required API:\n  # - get(key: String): Promise(Object)\n  # - set(key: String, value: Object): Promise\n  # - remove(key: String): Promise\n  startStorageSystem: (storeImpl) ->\n    @CryptoStorage.startStorageSystem(storeImpl)\n\n  # ajaxImpl required API:\n  # - ajax( url: String, data: String ): Promise(response)\n  #   Promise: resolved with text/plain response\n  #   method: POST\n  #   contentType: 'text/plain'\n  #   dataType: 'text'\n  setAjaxImpl: (ajaxImpl)->\n    @Utils.setAjaxImpl(ajaxImpl)\n\n# export glow in browser\nif window\n  window.glow = module.exports\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Extends several low level data types with utility functions\nUtils = require 'utils'\n\n# --- Extending functions of String class ---\nUtils.include String,\n  # string to an array of byte values\n  toCodeArray: ->\n    (s.charCodeAt() for s in @)\n\n  # UTF8 conversions\n  toUTF8: ->\n    unescape encodeURIComponent @\n  fromUTF8: ->\n    decodeURIComponent escape @\n\n  # Each char code to a Uint8Array\n  toUint8Array: ->\n    new Uint8Array @.toUTF8().toCodeArray()\n\n  toUint8ArrayRaw: ->\n    new Uint8Array @.toCodeArray()\n\n  # From base64 string to Uint8Array\n  fromBase64: ->\n    new Uint8Array (atob @).toCodeArray()\n\n  # Trim line feed chars\n  trimLines: ->\n    @.replace('\\r\\n', '').replace('\\n', '').replace('\\r', '')\n# ---\n\n# --- Extending functions of Array , Uint8Array , Uint16Array classes ---\nfor C in [Array , Uint8Array , Uint16Array]\n  Utils.include C,\n    # From JS arrays of char codes to a string\n    # UTF16 chars above ASCII will generate codes above 255\n    fromCharCodes: ->\n      (String.fromCharCode(c) for c in @).join('')\n\n    # From array of char codes to a base64 string\n    toBase64: ->\n      btoa @fromCharCodes()\n\n    xorWith: (a) ->\n      return null unless @.length is a.length\n      new Uint8Array(c ^ a[i] for c, i in @)\n\n    equal: (a2) ->\n      return false if @.length isnt a2.length\n      for v,i in @\n        return false if v isnt a2[i]\n      return true\n\n    sample: ->\n      return null unless @length > 0\n      @[Math.floor(Math.random()*@length)]\n\nUtils.include Uint8Array,\n  # creates a new Uint8Array that is the concat of self & anotherArray\n  concat: (anotherArray) ->\n    tmp = new Uint8Array(@byteLength + anotherArray.byteLength)\n    tmp.set(new Uint8Array(@), 0)\n    tmp.set(anotherArray, @byteLength)\n    return tmp\n\n  # .fill() for setting the whole array to a particular value\n  fillWith: (val) ->\n    for v, i in @\n      @[i] = val\n    @ # allows call chaining\n# --- end mixins ---\n\nmodule.exports = {} # Nothing to export\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nKeys          = require 'keys'\nUtils         = require 'utils'\nConfig        = require 'config'\nJsNaclDriver  = require 'js_nacl_driver'\n\n\nclass Nacl\n\n  @API: [\n    'crypto_secretbox_random_nonce'\n    'crypto_secretbox'\n    'crypto_secretbox_open'\n    'crypto_box'\n    'crypto_box_open'\n    'crypto_box_random_nonce'\n    'crypto_box_keypair'\n    'crypto_box_keypair_from_raw_sk'\n    'crypto_box_seed_keypair'\n    'crypto_box_keypair_from_seed' # deprecated\n    'crypto_hash_sha256'\n    'random_bytes'\n    'encode_latin1'\n    'decode_latin1'\n    'encode_utf8'\n    'decode_utf8'\n    'to_hex'\n    'from_hex'\n  ]\n\n  naclImpl: null\n\n  # Synchronous\n  @setNaclImpl: (naclImpl)->\n    @naclImpl = naclImpl\n\n  # Synchronous\n  @use: ->\n    @setDefaultNaclImpl() if not @naclImpl\n    @naclImpl\n\n  # Synchronous\n  @setDefaultNaclImpl: ->\n    @naclImpl = new JsNaclDriver()\n\n  # Returns a Promise\n  @makeSecretKey: ->\n    @use().random_bytes(@use().crypto_secretbox_KEYBYTES).then (bytes)->\n      new Keys\n        key: bytes\n\n  # Returns a Promise\n  @random: (size = 32)->\n    @use().random_bytes(size)\n\n  # Returns a Promise\n  @makeKeyPair: ->\n    @use().crypto_box_keypair().then (kp)->\n      new Keys(kp)\n\n  # Returns a Promise\n  @fromSecretKey: (raw_sk)->\n    @use().crypto_box_keypair_from_raw_sk(raw_sk).then (kp)->\n      new Keys(kp)\n\n  # Returns a Promise\n  @fromSeed: (seed)->\n    # Update to this call when native driver is updated\n    # @use().crypto_box_seed_keypair(seed).then (kp)->\n    @use().crypto_box_keypair_from_seed(seed).then (kp)->\n      new Keys(kp)\n\n  # Returns a Promise\n  @sha256: (data)->\n    @use().crypto_hash_sha256(data)\n\n  # Returns a Promise\n  @to_hex: (data)->\n    @use().to_hex(data)\n\n  # Returns a Promise\n  @from_hex: (data)->\n    @use().from_hex(data)\n\n  # Returns a Promise\n  @encode_latin1: (data)->\n    @use().encode_latin1(data)\n\n  # Returns a Promise\n  @decode_latin1: (data)->\n    @use().decode_latin1(data)\n\n  # Returns a Promise\n  @encode_utf8: (data)->\n    @use().encode_utf8(data)\n\n  # Returns a Promise\n  @decode_utf8: (data)->\n    @use().decode_utf8(data)\n\n  # h2(m) = sha256(sha256(32x0 + m))\n  # Zero out initial sha256 block, and double hash 0-padded message\n  # http://cs.nyu.edu/~dodis/ps/h-of-h.pdf\n  # Returns a Promise\n  @h2: (str)->\n    str = str.toUint8ArrayRaw() if Utils.type(str) is 'String'\n    tmp = new Uint8Array(32 + str.length)\n    tmp.fillWith 0\n    tmp.set(str, 32)\n    @sha256(tmp).then (sha)=>\n      @sha256(sha)\n\n  # Returns a Promise\n  @h2_64: (b64str)->\n    Nacl.h2(b64str.fromBase64()).then (h2)->\n      h2.toBase64()\n\nmodule.exports = Nacl\nwindow.Nacl = Nacl if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nUtils       = require 'utils'\nNacl        = require 'nacl'\nKeys        = require 'keys'\nKeyRing     = require 'keyring'\nKeyRatchet  = require 'keyratchet'\nMailbox     = require 'mailbox'\n\n# RatchetBox is a prototype to show a simple ratcheting schema implementation via Glow.\n# By overload relay_send and relay_messages we can introduce a key ratchet between\n# mailbox and its guests. All payload messages (object trees) are delivered along with\n# system field 'next_key' that contains next public key in the ratchet. The guest\n# confirm key with system field 'got_key'. Any message to guest or from guest advances\n# the ratchet to next_key from that side.\n#\n# TODO: provision for loss of messages by introducing 'reset' field - mailboxes\n# can singnal they dont have key material to decrypt laste message. That will revert\n# ratchet to long term idenitiy key and will cause the start of new key chain.\nclass RatchetBox extends Mailbox\n\n  # Returns a Promise\n  _loadRatchets: (guest) ->\n    # every guest will have a next confirmed key that we can reliably use, and\n    # a next key we are awaiting confirmation for. In local storage we will\n    # reference guests by the usual guest hpk=h2(pk)\n    @_gHpk(guest).then (gHpk)=>\n      gHpk = gHpk.toBase64()\n      # if we have confirmed ratchet key we use it, otherwise\n      # fallback to our @commKey\n      KeyRatchet.new(\"local_#{gHpk}_for_#{@hpk().toBase64()}\",\n        @keyRing, @keyRing.commKey).then (krLocal)=>\n        @krLocal = krLocal\n        KeyRatchet.new(\"guest_#{gHpk}_for_#{@hpk().toBase64()}\",\n          @keyRing, @keyRing.getGuestKey guest).then (krGuest)=>\n          @krGuest = krGuest\n\n  # Returns a Promise\n  relaySend: (relay, guest, m) ->\n    Utils.ensure(relay, guest, m)\n    # now we have 2 keys - the next key to send to a guest, and the last\n    # confirmed key we can use for encryption - it may be the comm identity key\n    # if we are at the start of a ratchet\n    @_loadRatchets(guest).then =>\n      # Save original message and include ratchet information along\n      msg =\n        org_msg: m\n      # Add next key to org_msg unless its a key confirmation message\n      msg['nextKey'] = @krLocal.nextKey.strPubKey() unless m.got_key\n      # Full message or just a 'got_key' confirmation?\n      # Use the confirmed ratchet key we got from the guest, or it will default\n      # to her public commKey\n      pk = @krGuest[if m.got_key then 'lastKey' else 'confirmedKey'].boxPk\n      @rawEncodeMessage(msg, pk, @krLocal.confirmedKey.boxSk).then (encMsg)=>\n        Nacl.h2(@_gPk(guest)).then (h2)=>\n          relay.upload(@, h2, encMsg)\n\n  # Returns a Promise\n  _tryKeypair: (nonce, ctext, pk, sk) ->\n    try\n      return @rawDecodeMessage(nonce.fromBase64(), ctext.fromBase64(), pk, sk)\n    catch e\n      Utils.resolve(null)\n\n  # Returns a Promise\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null) ->\n    return super(guest, nonce, ctext, session, skTag) if session\n    Utils.ensure(guest, nonce, ctext)\n    @_loadRatchets(guest).then =>\n      # console.log \"receiving from #{@_gPk(guest).toBase64()} => #{@getPubCommKey()} with #{@krGuest.confirmedKey.boxPk.toBase64()}\"\n      keyPairs = [\n        # defult: confirmed local and guest\n        [@krGuest.confirmedKey.boxPk, @krLocal.confirmedKey.boxSk],\n        # Guest might not have switched to latest key yet\n        [@krGuest.lastKey.boxPk, @krLocal.lastKey.boxSk],\n        [@krGuest.confirmedKey.boxPk, @krLocal.lastKey.boxSk],\n        [@krGuest.lastKey.boxPk, @krLocal.confirmedKey.boxSk]]\n      Utils.serial keyPairs, (kp)=>\n        @_tryKeypair(nonce, ctext, kp[0], kp[1])\n      .then (r)=>\n        console.log('RatchetBox decryption failed: message from ' +\n          'unknown guest or ratchet out of sync') unless r\n        r\n      # TODO: Add ratchet key reset protocol for this guest here (send \"reset\" command)\n\n  # Returns a Promise\n  relayMessages: ->\n    # First download pending messages\n    super().then (download)=>\n      # Now, lets process ratchet-related information in these messages\n      sendConfs = []\n      tasks = download.map (m)=>\n        return unless m.fromTag\n        @_loadRatchets(m.fromTag).then =>\n          # If guests send use their nextKey for ratchet\n          if m.msg?.nextKey\n            # save nextKey for that guest\n            nextKey = new Keys\n              boxPk: m.msg.nextKey.fromBase64()\n            next = @krGuest.confKey(nextKey).then (res)=>\n              if res\n                # send guest confirmation that we got it\n                Nacl.h2_64(m.msg.nextKey).then (h2)=>\n                  sendConfs.push\n                    toTag: m.fromTag\n                    key: m.msg.nextKey\n                    msg:\n                      got_key: h2\n          (next || Utils.resolve()).then =>\n            # If we got confirmation that our key is received\n            # we should move it to nextKey for that guest\n            if m.msg?.org_msg?.got_key\n              m.msg = m.msg.org_msg\n              # do we saved that key locally?\n              next2 = @krLocal.isNextKeyHash(m.msg.got_key.fromBase64()).then (isHash)=>\n                if isHash\n                  Nacl.makeKeyPair().then (kp)=>\n                    @krLocal.pushKey(kp)\n              .then =>\n                # we processed it, nothing else to do with this message\n                m.msg = null\n            (next2 || Utils.resolve()).then =>\n              # restore usual download structure\n              if m.msg\n                m.msg = m.msg.org_msg\n        # now we can send confirmations to guests that we got their key. Note\n        # that got_key is a service message that wont advance the ratchet\n        Utils.all(tasks).then =>\n          Utils.serial sendConfs, (sc)=>\n            @relaySend(sc.toTag,sc.msg).then =>\n              false # make sure serial() continues\n\n  # Returns a Promise\n  selfDestruct: (overseerAuthorized, withRatchet = false) ->\n    return unless overseerAuthorized\n    if withRatchet\n      Utils.all @keyRing.registry.map (guest)=>\n        @_loadRatchets(guest).then =>\n          @krLocal.selfDestruct(withRatchet).then =>\n            @krGuest.selfDestruct(withRatchet)\n      .then =>\n        super(overseerAuthorized)\n\nmodule.exports = RatchetBox\nwindow.RatchetBox = RatchetBox if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig       = require 'config'\nKeys         = require 'keys'\nNacl         = require 'nacl'\nUtils        = require 'utils'\nEventEmitter = require('events').EventEmitter\n\nclass Relay extends EventEmitter\n\n  # skip url for offline testing\n  # Synchronous\n  constructor: (@url = null)->\n    # already occurred errors counter\n    # relay is marked as disabled after RELAY_RETRY_REQUEST_ATTEMPTS\n    @retriesCount = 0\n\n    if @url and localStorage\n      # timestamp until which relay will remain disabled\n      @blockedTill = localStorage.getItem(\"blocked_#{@url}\") or 0\n\n    @_resetState() # until a succesful handshake\n    # plugins can add their own commands to specific relays\n    @RELAY_COMMANDS = [\n      # message commands\n      'count', 'upload', 'download', 'messageStatus', 'delete',\n      # file commands\n      'startFileUpload', 'uploadFileChunk', 'downloadFileChunk', 'fileStatus', 'deleteFile',\n      # reserved for future use\n      'getEntropy']\n\n  # Returns a Promise\n  openConnection: ->\n    # exchange tokens with a relay and get a temp session key for this relay\n    @getServerToken().then =>\n      @getServerKey()\n\n  # Returns a Promise\n  getServerToken: ->\n    Utils.ensure(@url)\n    # Generate a clientToken. It will be used as part of handshake id with relay\n    unless @clientToken\n      next = Nacl.random(Config.RELAY_TOKEN_LEN).then (clientToken)=>\n        @clientToken = clientToken\n    next = (next || Utils.resolve()).then =>\n      # sanity check the client token\n      if @clientToken and @clientToken.length isnt Config.RELAY_TOKEN_LEN\n        throw new Error(\"Token must be #{Config.RELAY_TOKEN_LEN} bytes\")\n      # avoid resetting the @clientToken in case the following ajax call takes\n      # a longer time to complete\n      clearTimeout(@clientTokenExpiration) if @clientTokenExpiration\n      # make ajax request\n      @_request('start_session', @clientToken.toBase64()).then (data)=>\n        # Will remove after token expires on relay\n        # Call before assigning @relayToken to prevent accidental\n        # reset of the newly assigned value.\n        @_scheduleExpireSession()\n        # relay responds with its own counter token. Until session is\n        # established these 2 tokens are handshake id.\n        lines = @_processData(data)\n        @relayToken = lines[0].fromBase64()\n        throw new Error(\"Wrong start_session from #{@url}\") if lines.length != 2\n        @diff = parseInt(lines[1])\n        # console.log \"diff #{@diff}\"\n        if @diff > 10\n          console.log \"Relay #{@url} requested difficulty #{@diff}. Session handshake may take longer.\"\n        if @diff > 16\n          console.log \"Attempting handshake at difficulty #{@diff}! This may take a while\"\n        data\n\n  # Returns a Promise\n  getServerKey: ->\n    Utils.ensure(@url, @clientToken, @relayToken)\n    # After the clientToken is sent to reley, we use only the h2() of it\n    Nacl.h2(@clientToken).then (h2ClientToken)=>\n      @h2ClientToken = h2ClientToken.toBase64()\n      # compute session handshake\n      handshake = @clientToken.concat(@relayToken)\n      if @diff is 0\n        next = Nacl.h2(handshake).then (h2)=>\n          h2.toBase64()\n      else\n        ensureNonceDiff = =>\n          Nacl.random(32).then (nonce)=>\n            Nacl.h2(handshake.concat(nonce)).then (h2)=>\n              return nonce if Utils.arrayZeroBits(h2, @diff)\n              ensureNonceDiff()\n        next = ensureNonceDiff().then (nonce)=>\n          nonce.toBase64()\n      # make ajax request\n      next.then (sessionHandshake)=>\n        # We confirm handshake by sending back h2(clientToken, relay_token)\n        @_request('verify_session', @h2ClientToken, sessionHandshake).then (d)=>\n          # relay gives us back temp session key\n          # masked by clientToken we started with\n          relayPk = d.fromBase64()\n          @relayKey = new Keys { boxPk: relayPk }\n          @online = true\n          delete @diff\n          d\n          # @_scheduleExpireSession Config.RELAY_SESSION_TIMEOUT\n          # Will remove after the key expires on this relay\n\n  # Synchronous\n  relayId: ->\n    Utils.ensure(@url)\n    \"relay_#{@url}\"\n\n  # Returns a Promise\n  connectMailbox: (mbx)->\n    Utils.ensure(mbx, @online, @relayKey, @url)\n    relayId = @relayId()\n    mbx.createSessionKey(relayId, true).then (key)=>\n      @_request('prove', mbx, key.boxPk).then (d)=>\n        # console.log \"#{@url} => #{d} messages\"\n        # return relayId, the mailbox emits 'relaysessiontimeout'\n        # with that relayId (sess_id) as a parameter.\n        relayId\n\n  # Returns a Promise\n  runCmd: (cmd, mbx, params = null)->\n    Utils.ensure(cmd, mbx)\n    unless cmd in @RELAY_COMMANDS\n      throw new Error(\"Relay #{@url} doesn't support #{cmd}\")\n    data =\n      cmd: cmd\n    data = Utils.extend(data, params) if params\n    \n    @_request('command', mbx, data).then (d)=>\n      # no data in the response; return msg obj for tests.nonce\n      throw new Error(\"#{@url} - #{cmd} error\") unless d?\n      @_processResponse(d, mbx, cmd, params)\n    .catch (err)=>\n      throw new Error(\"#{@url} - #{cmd} - #{err.message}\")\n\n  # Returns a Promise\n  _request: (type, param1, param2)->\n    Utils.ensure(type, param1)\n    if @blockedTill? and @blockedTill > Date.now()\n      throw new Error('Relay disabled till ' + new Date(parseInt(@blockedTill, 10)))\n\n    if @retriesCount >= Config.RELAY_RETRY_REQUEST_ATTEMPTS\n      @retriesCount = 0\n      @blockedTill = Date.now() + Config.RELAY_BLOCKING_TIME\n      localStorage.setItem(\"blocked_#{@url}\", @blockedTill) if localStorage\n      throw new Error('Relay out of reach')\n\n    switch type\n      when 'start_session'\n        request = @_ajax('start_session', param1)\n      when 'verify_session'\n        request = @_ajax('verify_session', param1, param2)\n      when 'prove'\n        mbx = param1\n        clientTempPk = param2\n        mbx.keyRing.addTempGuest(@relayId(), @relayKey.strPubKey())\n        delete @relayKey # now it belongs to the mailbox\n        # Alice creates a 32 byte session signature as\n        # h₂(a_temp_pk, relayToken, clientToken)\n        sign = clientTempPk.concat(@relayToken).concat(@clientToken)\n        request = Nacl.h2(sign).then (h2Sign)=>\n          mbx.encodeMessage(@relayId(), h2Sign).then (inner)=>\n            inner['pub_key'] = mbx.keyRing.getPubCommKey()\n            mbx.encodeMessage(@relayId(), inner, true).then (outer)=>\n              @_ajax('prove', @h2ClientToken, clientTempPk.toBase64(), outer.nonce, outer.ctext)\n      when 'command'\n        if param2.cmd == 'uploadFileChunk'\n          # do not encode file chunk contents, as it's already encoded with symmetric encryption\n          ctext = param2.ctext\n          # clone payload object (original one may be reused in `catch` block)\n          payload = Utils.extend {}, param2\n          delete payload.ctext\n          request = param1.encodeMessage(@relayId(), payload, true).then (message)=>\n            @_ajax('command', param1.hpk(), message.nonce, message.ctext, ctext)\n        else\n          request = param1.encodeMessage(@relayId(), param2, true).then (message)=>\n            @_ajax('command', param1.hpk(), message.nonce, message.ctext)\n      else\n        throw new Error(\"Unknown request type #{type}\")\n\n    request\n    .then (data)=>\n      # reset error counter if the request was successful\n      @retriesCount = 0\n      @blockedTill = 0\n      data\n    .catch (err)=>\n      throw new Error('Bad Request') unless err.response?.status in [401, 500]\n      # retry the request if there's a session error (401 Unauthorized)\n      # or server is temporarily down (500 Internal Server Error)\n      @retriesCount++\n      @_resetState()\n      # simply try to restart a session if there was an issue while establishing it\n      if type is 'start_session'\n        @getServerToken()\n      else if type is 'verify_session'\n        @openConnection()\n      # otherwise, restart a session and run the same command again\n      else if type is 'prove'\n        @openConnection().then =>\n          @connectMailbox(param1)\n      else\n        @openConnection().then =>\n          @connectMailbox(param1).then =>\n            @_request(type, param1, param2)\n\n  # Returns a decrypt promise or direct response data\n  _processResponse: (d, mbx, cmd, params)->\n    datain = @_processData String(d)\n\n    if cmd is 'delete'\n      return JSON.parse(d)\n\n    if cmd is 'upload'\n      unless datain.length is 1 and datain[0].length is Config.RELAY_TOKEN_B64\n        throw new Error(\"#{@url} - #{cmd}: Bad response\")\n      params.storage_token = d\n      return params\n\n    if cmd is 'messageStatus'\n      unless datain.length is 1\n        throw new Error(\"#{@url} - #{cmd}: Bad response\")\n      return parseInt datain[0]\n\n    if cmd is 'downloadFileChunk'\n      unless datain.length is 3\n        throw new Error(\"#{@url} - #{cmd}: Bad response\")\n      nonce = datain[0]\n      ctext = datain[1]\n      return mbx.decodeMessage(@relayId(), nonce, ctext, true).then (response)=>\n        response = JSON.parse(response)\n        response.ctext = datain[2]\n        response\n\n    # rest of commands\n    unless datain.length is 2\n      throw new Error(\"#{@url} - #{cmd}: Bad response\")\n    nonce = datain[0]\n    ctext = datain[1]\n    \n    if cmd in ['startFileUpload', 'fileStatus', 'uploadFileChunk', 'deleteFile']\n      mbx.decodeMessage(@relayId(), nonce, ctext, true).then (response)=>\n        JSON.parse(response)\n    else\n      mbx.decodeMessage(@relayId(), nonce, ctext, true)\n\n  # Synchronous\n  _processData: (d)->\n    datain = d.split('\\r\\n')\n    datain = d.split('\\n') unless datain.length >= 2\n    datain\n\n  # Returns a Promise\n  _ajax: (cmd, data...)=>\n    Utils.ajax(\"#{@url}/#{cmd}\", data.join('\\r\\n'))\n\n  # --- Command wrappers ---\n\n  # Returns a Promise\n  count: (mbx)->\n    @runCmd('count', mbx)\n\n  # Returns a Promise\n  upload: (mbx, toHpk, payload)->\n    @runCmd('upload', mbx,\n      to: toHpk.toBase64()\n      payload: payload)\n\n  # Returns a Promise\n  messageStatus: (mbx, storage_token)->\n    @runCmd('messageStatus', mbx,\n      token: storage_token)\n\n  # Returns a Promise\n  download: (mbx)->\n    @runCmd('download', mbx)\n\n  # Returns a Promise\n  delete: (mbx, nonceList)->\n    @runCmd('delete', mbx,\n      payload: nonceList)\n\n  # Returns a Promise\n  startFileUpload: (mbx, toHpk, fileSize, metadata)->\n    @runCmd('startFileUpload', mbx,\n      to: toHpk.toBase64()\n      file_size: fileSize\n      metadata: metadata)\n\n  # Returns a Promise\n  uploadFileChunk: (mbx, uploadID, part, totalParts, payload)->\n    @runCmd('uploadFileChunk', mbx,\n      uploadID: uploadID\n      part: part\n      # marker of last chunk, sent only once\n      last_chunk: (totalParts - 1 == part)\n      nonce: payload.nonce\n      ctext: payload.ctext)\n\n  # Returns a Promise\n  fileStatus: (mbx, uploadID)->\n    @runCmd('fileStatus', mbx,\n      uploadID: uploadID)\n\n  # Returns a Promise\n  downloadFileChunk: (mbx, uploadID, chunk)->\n    @runCmd('downloadFileChunk', mbx,\n      uploadID: uploadID\n      part: chunk)\n\n  # Returns a Promise\n  deleteFile: (mbx, uploadID)->\n    @runCmd('deleteFile', mbx,\n      uploadID: uploadID)\n\n  # --- Token/session expiration ---\n\n  # Deletes all local session tokens\n  # Our information has expired on the relay and a new session has to be\n  # established with all new tokens\n  # Synchronous\n  _resetState: ->\n    @clientToken = null\n    @online = false\n    @relayToken = null\n    @relayKey = null\n    @clientTokenExpiration = null\n    @clientTokenExpirationStart = 0\n\n  # Allows for preemptive client token renewal to avoid\n  # timeouts in the middle of a relay check\n  # Synchronous\n  timeToTokenExpiration: ->\n    Math.max(Config.RELAY_TOKEN_TIMEOUT - (Date.now() - @clientTokenExpirationStart), 0)\n\n  # Allows for preemptive mailbox session renewal to avoid\n  # timeouts in the middle of a relay check\n  # Synchronous\n  timeToSessionExpiration: (mbx)->\n    mbx.timeToSessionExpiration(@relayId())\n\n  # Synchronous\n  _scheduleExpireSession: ->\n    clearTimeout(@clientTokenExpiration) if @clientTokenExpiration\n    @clientTokenExpirationStart = Date.now()\n    @clientTokenExpiration = setTimeout =>\n      @_resetState()\n      @emit('relaytokentimeout')\n    , Config.RELAY_TOKEN_TIMEOUT # Token will expire on the relay\n\nmodule.exports = Relay\nwindow.Relay = Relay if window.__CRYPTO_DEBUG\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nUtils = require 'utils'\n\n# A test driver - not to be used in production for permanent key storage\nclass SimpleTestDriver\n\n  _state: null\n  _key_tag: (key) -> \"#{@_root_tag}.#{key}\"\n\n  # Synchronous\n  constructor: (root = 'storage.', sourceData = null) ->\n    @_root_tag = \"__glow.#{root}\" # + root\n    @_load(sourceData)\n\n  # Returns a Promise\n  get: (key) ->\n    @_load() if not @_state\n    res = if @_state[key] then @_state[key] else JSON.parse localStorage.getItem @_key_tag key\n    Utils.resolve(res)\n\n  # Returns a Promise\n  set: (key, value) ->\n    @_load() if not @_state\n    @_state[key] = value\n    localStorage.setItem @_key_tag(key), JSON.stringify value\n    @_persist()\n\n  # Returns a Promise\n  multiSet: (pairs) ->\n    @_load() if not @_state\n    for key, i in pairs by 2\n      localStorage.setItem @_key_tag(key), JSON.stringify pairs[i+1]\n    @_persist()\n\n  # Returns a Promise\n  remove: (key) ->\n    @_load() if not @_state\n    delete @_state[key]\n    localStorage.removeItem @_key_tag key\n    @_persist()\n\n  # Returns a Promise\n  _persist: () ->\n    # Permanently save the state object in a real driver\n    # _state.save()\n    Utils.resolve()\n\n  # Synchronous\n  _load: (sourceData = null) ->\n    # Load from persitent app storage in the real driver\n    @_state = if sourceData then sourceData else {}\n    console.log 'INFO: SimpleTestDriver uses localStorage and should not be\n      used in production for permanent key storage.'\n\nmodule.exports = SimpleTestDriver\n",
    "# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Low level basic utilities and mixins\n# zepto = require 'zepto' # minimalist js library. similar syntax to jQuery\nConfig = require 'config'\n\nclass Utils\n\n  # --- Mixins ---\n\n  # Wraps http://zeptojs.com/#$.extend - provided so that you can swap\n  # zepto for another js library that doesn't have the same extend behavior.\n  # Uses default impl if $.extend not available.\n  @extend = (target, source) ->\n    if $?.extend\n      $.extend target, source\n    else\n      for key, val of source\n        if source[key] isnt undefined\n          target[key] = source[key]\n      target\n\n  # convenience function for extending an object by class\n  @include = (klass, mixin) ->\n    @extend klass.prototype, mixin\n\n  # extracts just the name portion as a string of an object's class\n  @type = (obj) ->\n    return 'undefined' if obj is undefined\n    return 'null' if obj is null\n    Object::toString.call(obj)\n      .replace('[', '').replace(']', '').split(' ')[1]\n\n  # --- Ajax ---\n\n  @ajaxImpl: null\n\n  # see: Main.setAjaxImpl()\n  @setAjaxImpl: (ajaxImpl)->\n    @ajaxImpl = ajaxImpl\n\n  # wraps http://zeptojs.com/#$.ajax - provided so that if you can swap\n  # zepto for another js library that doesn't have the same ajax behavior\n  @ajax: (url, data) ->\n    @setDefaultAjaxImpl() if not @ajaxImpl\n    @ajaxImpl url, data\n\n  @setDefaultAjaxImpl: ->\n    # try to auto-set some default implementations here, if present\n    # Axios + Promise; https://github.com/mzabriskie/axios\n    if axios?\n      @setAjaxImpl (url, data)->\n        axios\n          url: url\n          method: 'post'\n          headers:\n            'Accept': 'text/plain'\n            'Content-Type': 'text/plain'\n          data: data\n          responseType: 'text'\n          timeout: Config.RELAY_AJAX_TIMEOUT\n        .then (response)->\n          response.data\n    # Zepto; https://github.com/madrobby/zepto\n    # Note: broken Promises - will not catch exceptions in .then/.done\n    else if $?.ajax && $?.Deferred\n      @setAjaxImpl (url, data)->\n        $.ajax\n          url: url\n          type: 'POST'\n          dataType: 'text'\n          timeout: Config.RELAY_AJAX_TIMEOUT\n          context: @\n          error: console.log\n          contentType: 'text/plain'\n          data: data\n    else\n      throw new Error('Unable to set default Ajax implementation.')\n\n  # --- Promises ---\n\n  @promiseImpl: null\n\n  # see: Main.setPromiseImpl()\n  @setPromiseImpl: (promiseImpl)->\n    @promiseImpl = promiseImpl\n\n  @getPromiseImpl: ->\n    @setDefaultPromiseImpl() if not @promiseImpl\n    @promiseImpl\n\n  @setDefaultPromiseImpl: ->\n    if Promise?\n      @setPromiseImpl\n        promise: (resolver)->\n          new Promise(resolver)\n        all: (arr)->\n          Promise.all(arr)\n    else\n      throw new Error('Unable to set default Promise implementation.')\n\n  # --- Utilities ---\n\n  # calls func after the specified delay in milliseconds\n  @delay: (milliseconds, func) ->\n    setTimeout(func, milliseconds)\n\n  # splits an integer into an array of bytes\n  @itoa: (n) ->\n    return new Uint8Array(0 for i in [0..7]) if n <= 0\n    [floor, pw, lg] = [Math.floor, Math.pow, Math.log] # aliases\n\n    top = floor lg(n) / lg(256)\n    new Uint8Array( floor(n / pw(256, i)) % 256 for i in [top..0] )\n\n  @atoi: (a) ->\n    l = a.length-1\n    sum = 0\n    sum += v*Math.pow(256,l-i) for v,i in a\n    sum\n\n  # returns true if the rightmost n bits of a byte are 0\n  @firstZeroBits: (byte, n) ->\n    byte is ((byte >> n) << n)\n\n  # check whether the rightmost difficulty bits of an Uint8Array are 0, where\n  # the lowest indexes of the array represent those rightmost bits. Thus if\n  # the difficulty is 17, then arr[0] and arr[1] should be 0, as should the\n  # rightmost bit of arr[2]. This is used for our difficulty settings in Zax to\n  # reduce burden on a busy server by ensuring clients have to do some\n  # additional work during the session handshake\n  @arrayZeroBits: (arr, diff) ->\n    rmd = diff\n    for i in [0..(1 + diff / 8)]\n      a = arr[i]\n      return true if rmd <= 0\n      if rmd > 8\n        rmd -= 8\n        return false if a > 0\n      else\n        return @firstZeroBits(a, rmd)\n    return false\n\n  # Create a resolved Promise\n  @resolve: (value)->\n    @getPromiseImpl().promise (res, rej)-> res(value)\n\n  # Create a rejected Promsie\n  @reject: (error)->\n    @getPromiseImpl().promise (res, rej)-> rej(error)\n\n  # Create a deferred Promise\n  @promise: (resolver)->\n    @getPromiseImpl().promise (resolver)\n\n  # Wait for all promises\n  @all: (promises)->\n    @getPromiseImpl().all(promises)\n\n  # Keep executing promiseFunc on each element of the array,\n  # until it returns a truish value.\n  @serial: (arr, promiseFunc)->\n    i = 0\n    iter = (elem)=>\n      promiseFunc(elem).then (res)->\n        return res if res\n        iter(arr[++i]) if i < arr.length\n    iter(arr[++i])\n\n  # Ensure every argument is truish\n  @ENSURE_ERROR_MSG = 'invalid arguments'\n  @ensure: ()=>\n    for a in arguments\n      throw new Error(@ENSURE_ERROR_MSG) unless a\n\nmodule.exports = Utils\nwindow.Utils = Utils if window.__CRYPTO_DEBUG\n"
  ]
}